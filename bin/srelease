#!/usr/bin/env bash
# Autogenerated script, compiled from the Bish language.
# Bish version 0.1
# Please see https://github.com/tdenniston/bish for more information about Bish.

function bish_help () {
    local _0="\nSoftware Release";
    stdlib_println "$_0";
    local _1="    script created to automate release management process\n\n";
    stdlib_println "$_1";
    local _2="prepare";
    bish_text_bold "$_2";
    local _rv_4="$_global_retval_1";
    local prepare="$_rv_4";
    local _3="task";
    bish_text_bold "$_3";
    local _rv_5="$_global_retval_1";
    local task="$_rv_5";
    local _4="start";
    bish_text_bold "$_4";
    local _rv_6="$_global_retval_1";
    local start="$_rv_6";
    local _5="clean";
    bish_text_bold "$_5";
    local _rv_7="$_global_retval_1";
    local clean="$_rv_7";
    local _6="    $prepare: initialize \`releases/\` folder with files\n";
    stdlib_println "$_6";
    local _7="             \033[1msrelease prepare\033[0m\n\n";
    stdlib_println "$_7";
    local _8="    $task:    - fork to branch \`feature/<task>-<postfix>\`";
    stdlib_println "$_8";
    local _9="             - create task file at \`releases/current/<task>\`\n";
    stdlib_println "$_9";
    local _10="             \033[1msrelease task task-11\033[0m";
    stdlib_println "$_10";
    local _11="                 => ";
    stdlib_print "$_11";
    local _12="forks \`feature/task-11\`, creates \`releases/current/task-11\`";
    bish_text_blue "$_12";
    local _rv_8="$_global_retval_3";
    local _13="$_rv_8";
    stdlib_println "$_13";
    local _14="             \033[1msrelease task task-11 create_readme\033[0m";
    stdlib_println "$_14";
    local _15="                 => ";
    stdlib_print "$_15";
    local _16="forks \`feature/task-11-create_readme\`, creates \`releases/current/task-11\`";
    bish_text_blue "$_16";
    local _rv_9="$_global_retval_3";
    local _17="$_rv_9";
    stdlib_println "$_17";
    local _18="\n";
    stdlib_println "$_18";
    local _19="    $start:   - fork to branch \`release/<today's date>-<postfix>\`";
    stdlib_println "$_19";
    local _20="             - summarize \`releases/current/*\` files to \`releases/history/<branch name>\`\n";
    stdlib_println "$_20";
    local _21="             \033[1msrelease start\033[0m              => ";
    stdlib_print "$_21";
    local _22="forks and creates \`releases/history/2017-02-05\`";
    bish_text_blue "$_22";
    local _rv_10="$_global_retval_3";
    local _23="$_rv_10";
    stdlib_println "$_23";
    local _24="             \033[1msrelease start backend_team\033[0m => ";
    stdlib_print "$_24";
    local _25="forks and creates \`releases/history/2017-02-05-backend_team\`";
    bish_text_blue "$_25";
    local _rv_11="$_global_retval_3";
    local _26="$_rv_11";
    stdlib_println "$_26";
    local _27="\n";
    stdlib_println "$_27";
    local _28="    $clean:   remove all files from \`releases/current/\` except \`.keep\`\n";
    stdlib_println "$_28";
    local _29="             \033[1msrelease clean\033[0m\n\n";
    stdlib_println "$_29";
}

function bish_clean_release () {
    local size=$(find ./releases/current | wc -l);
    if [[ $size -gt 2 ]]; then
        local files=$(find ./releases/current/* ! -name ".keep");
        local msg="";
        for file in $files; do
            rm $file;
            local _30="\`$file\`";
            bish_text_blue "$_30";
            local _rv_14="$_global_retval_3";
            local formatted_file="$_rv_14";
            local msg="$msg  $formatted_file\n";
        done;
        local _31="files removed";
        bish_succeed "$_31";
        local _32="$msg";
        stdlib_println "$_32";
    else
        local _33="releases/current/";
        bish_text_blue "$_33";
        local _rv_13="$_global_retval_3";
        local current="$_rv_13";
        local _34="\`$current\` already empty";
        bish_succeed "$_34";
    fi;
}

function bish_create_task () {
    local task_name="${args[2]}";
    local branch_postfix="${args[3]}";
    local task_path="releases/current/$task_name";
    local _35="$task_path";
    bish_text_blue "$_35";
    local _rv_18="$_global_retval_3";
    local formatted_task_path="$_rv_18";
    local _37="$task_path";
    stdlib_exists "$_37";
    local _rv_19="$_global_retval_16";
    if [[ "$task_name" == "" ]]; then
        local _36="task name can't be blank";
        bish_error "$_36";
        exit 1;
    elif [[ $_rv_19 -eq 1 ]]; then
        local _38="task file already exists: \`$formatted_task_path\`";
        bish_error "$_38";
        exit 1;
    else
        local branch="feature/$task_name";
        if [[ "$branch_postfix" != "" ]]; then
            local branch="$branch-$branch_postfix";
        fi;
        local _39="$branch";
        bish_fork_to "$_39";
        touch $task_path;
        local _40="task file created at \`$formatted_task_path\`";
        bish_succeed "$_40";
    fi;
}

function bish_create_release () {
    local date=$(date +%Y-%m-%d);
    local release_title="$date";
    local postfix="${args[2]}";
    if [[ "$postfix" != "" ]]; then
        local release_title="$release_title-$postfix";
    fi;
    local release_branch="release/$release_title";
    local release_file_path="releases/history/$release_title";
    local _41="$release_file_path";
    bish_text_blue "$_41";
    local _rv_21="$_global_retval_3";
    local formatted_release_file_path="$_rv_21";
    local _42="$release_file_path";
    stdlib_exists "$_42";
    local _rv_22="$_global_retval_16";
    if [[ $_rv_22 -eq 1 ]]; then
        local _43="release file already exists: \`$formatted_release_file_path\`";
        bish_error "$_43";
        exit 1;
    fi;
    local _44="$release_branch";
    bish_fork_to "$_44";
    local _45="$release_file_path";
    bish_notes "$_45";
}

function bish_notes () {
    local release_file_path="$1";
    local release_files=$(ls "releases/current");
    local release_notes="";
    for file in $release_files; do
        local file_path="releases/current/$file";
        local task_description="";
        while IFS='' read -r line || [[ -n "$line" ]]; do
task_description+="
    $line"
    done < $file_path;
        local release_notes="$release_notes$file";
        if [[ "$task_description" != "" ]]; then
            local release_notes="$release_notes$task_description";
        fi;
        local release_notes="$release_notes\n";
    done;
    local release_file_status=$(touch $release_file_path || echo "failed");
    if [[ "$release_file_status" == "failed" ]]; then
        local _46="can't create release file at \`$formatted_release_file_path\`";
        bish_error "$_46";
        local _47="check \`releases/\` folder exists";
        bish_info "$_47";
        exit 1;
    fi;
    echo -e "$release_notes" > $release_file_path;
    local _48="release file created at \`$formatted_release_file_path\`";
    bish_succeed "$_48";
    local _49="srelease clean";
    bish_text_bold "$_49";
    local _rv_24="$_global_retval_1";
    local clean="$_rv_24";
    local _50="don't forget to remove \`release/current/\` files except \`.keep\`\n  or just run \`$clean\`";
    bish_info "$_50";
}

function bish_init_release () {
    local _51="releases/";
    stdlib_exists "$_51";
    local _rv_25="$_global_retval_16";
    if [[ $_rv_25 -eq 1 ]]; then
        local _52="\`releases/\` folder already exists";
        bish_error "$_52";
        exit 1;
    fi;
    local _53="\nRelease initialisation\n";
    stdlib_println "$_53";
    mkdir "releases/";
    mkdir "releases/current";
    touch "releases/current/.keep";
    mkdir "releases/history";
    touch "releases/history/.keep";
    local releases_tree=$(find "./releases");
    local _54="$releases_tree";
    bish_text_blue "$_54";
    local _rv_26="$_global_retval_3";
    local _55="$_rv_26";
    stdlib_println "$_55";
    local _56="";
    stdlib_println "$_56";
}

function bish_fork_to () {
    local branch="$1";
    local _57=".git/";
    stdlib_exists "$_57";
    local _rv_27="$_global_retval_16";
    if [[ $_rv_27 -eq 0 ]]; then
        local _58="git repository not initialised";
        bish_error "$_58";
        exit 1;
    fi;
    if [[ $(git status -s) != "" ]]; then
        local _59="make sure all changes are commited";
        bish_error "$_59";
        exit 1;
    fi;
    if [[ $(git branch | grep $branch) != "" ]]; then
        local _60="branch $branch already exist";
        bish_error "$_60";
        exit 1;
    fi;
    local current_branch=$(git rev-parse --abbrev-ref HEAD);
    local is_branch_created=$(git checkout -b $branch || echo "no");
    if [[ "$is_branch_created" == "no" ]]; then
        local _61="can't create branch $branch";
        bish_error "$_61";
        exit 1;
    else
        local _62="forked from \`$current_branch\` to \`$branch\`";
        bish_info "$_62";
    fi;
}

function bish_error () {
    local text="$1";
    local _63="$text";
    bish_text_red "$_63";
    local _rv_29="$_global_retval_28";
    local msg="$_rv_29";
    local _64="";
    stdlib_println "$_64";
    local _65="  $msg";
    stdlib_println "$_65";
    local _66="";
    stdlib_println "$_66";
}

function bish_info () {
    local text="$1";
    local _67="$text";
    bish_text_blue "$_67";
    local _rv_30="$_global_retval_3";
    local msg="$_rv_30";
    local _68="";
    stdlib_println "$_68";
    local _69="  $msg";
    stdlib_println "$_69";
    local _70="";
    stdlib_println "$_70";
}

function bish_succeed () {
    local text="$1";
    local _71="$text";
    bish_text_succeed "$_71";
    local _rv_32="$_global_retval_31";
    local msg="$_rv_32";
    local _72="";
    stdlib_println "$_72";
    local _73="  $msg";
    stdlib_println "$_73";
    local _74="";
    stdlib_println "$_74";
}

function bish_text_bold () {
    local text="$1";
    _global_retval_1="\033[1m$text\033[0m";
    return;
}

function bish_text_red () {
    local text="$1";
    _global_retval_28="\033[91m$text\033[0m";
    return;
}

function bish_text_blue () {
    local text="$1";
    _global_retval_3="\033[94m$text\033[0m";
    return;
}

function bish_text_succeed () {
    local text="$1";
    _global_retval_31="\033[92m$text\033[0m";
    return;
}

function bish_main () {
    if [[ "${args[1]}" == "prepare" ]]; then
        bish_init_release;
    elif [[ "${args[1]}" == "start" ]]; then
        bish_create_release;
    elif [[ "${args[1]}" == "task" ]]; then
        bish_create_task;
    elif [[ "${args[1]}" == "clean" ]]; then
        bish_clean_release;
    else
        bish_help;
    fi;
}

function stdlib_exists () {
    local file="$1";
    test -e $file;
    stdlib_success;
    local _rv_39="$_global_retval_38";
    _global_retval_16="$_rv_39";
    return;
}

function stdlib_success () {
    local rc=$(echo $?);
    if [[ $rc -eq 0 ]]; then
        _global_retval_38=1;
        return;
    else
        _global_retval_38=0;
        return;
    fi;
}

function stdlib_print () {
    local s="$1";
    echo -ne "$s";
}

function stdlib_println () {
    local s="$1";
    echo -e "$s";
}
args=( $0 "$@" );
{
    : # Empty function
}
bish_main;
